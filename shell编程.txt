shell编程之变量
		用户自定义变量
			（shell中变量值默认都为字符串类型）
			1 定义变量： 变量名=变量值
			2 调用变量： echo $变量名
			3 变量叠加（追加）： x=123 x="$x"456或者x=${x}789
			4 变量查看：set（查询系统下所有已生效的变量--环境变量。自定义变量）
			-u：如果设定此选项，调用未声明变量时会报错
			5 删除变量：unset 变量名（不用加$）
		环境变量
			#！/bin/bash
			chmod 755 hellod.sh 执行
			$PS1  命令提示符设置
			export
		  env 查看环境变量
			HOSTNAME 主机名
			SHELL 当前的shell
			TERM 终端环境
			HISTSIZE 历史命令条数
			SSH_CLIENT 当前操作环境是用SSH连接的，这里记录客户端ip
			SSH_TTY ssh连接的终端时pts/1
			USER 当前登陆的用户
		预定义变量
			locale 查询当前系统语系
			locale -a 
			/etc/syscnfig/i18n 下次开机默认的语言
			-LANG 定义系统主语系的变量
			-LC_ALL 定义整体语系的变量
		位置变量
			$n n为数字，$0代表命令本身，$1-$9代表第1-9个参数，十以上的参数需要使用大括号包含，${10}
			$* 代表命令行中的所有参数，并把所有参数看做一个整体
			$@ 也代表所有参数，但是把每个参数区分对待
			$# 命令行中所有参数的个数
			例子：求和
			#! /bin/bash
			num1=$1
			num2=$2
			sum=$(($num1+$num2))
			echo $sum
			例子：验证$*和$@的区别
			#! /bin/bash
			for i in "$*"
			do
			echo "The parameters is: $i"
			done

			for y in "$@"
			do
			echo "Parameter:$y"
			done

    预定义变量
    	ctrl+c和ctrl+z都是中断命令,但是他们的作用却不一样.
			ctrl+c是强制中断程序的执行,
			而ctrl+z的是将任务中断,但是此任务并没有结束,他仍然在进程中他只是维持挂起的状态,用户可以使用fg/bg操作继续前台或后台的任务,fg命令重新启动前台被中断的任务,bg命令把被中断的任务放在后台执行.
			例如:
			当你vi一个文件是,如果需要用shell执行别的操作,但是你又不打算关闭vi,因为你得
			存盘推出,你可以简单的按下ctrl+z,shell会将vi进程挂起~,当你结束了那个shell操作之后,你可以用fg命令继续vi你的文件.
			
			$? 最后一次执行的命令的返回状态。如果这个值为0，证明上一个命令正确执行，如果这个变量的值为非0，则证明上一个命令执行不正确了
			$$ 当前进程的进程号（PID)
			$! 后台运行的最后一个进程的进程号

			read -p "" -t 30 name 接收输入的字符
			read -p "" -s pwsswad 不显示内容
			read -p "" -n 1 sex 控制输入的字符数量


shell编程之运算符
	1.declare声明变量类型
		declare [+/-][选项] 变量名	
			-给变量设定类型属性，+取消变量的类型属性，
			-a将变量声明为数组型，-i将变量设定为整型，
			-x声明为环境变量，-r设置为只读属性
			-p 显示类型
		例如：aa=11 bb=22 --> declare -i cc=$aa+$bb
	2.声明数组变量
		定义数组：movie[0]=zp movie[1]=tp declare -a movie[2]=live
		调用数组：echo ${movie} 表示调用第一个
		echo ${movie[1]} 表示调用第二个
		echo ${movie[*]} 表示显示数组中的所有元素
		3.声明环境变量
		declare -x test =123 作用与export相同

	数值运算
		方法1：declare -i dd =$aa+$bb

		方法2： dd=$(expr $aa + $bb)
		#dd的值是aa和bb的和，注意“+”左右必须有空格

		方法3： dd=$(($aa+$bb))或dd= $[$aa+$bb]


shell编程之环境变量配置文件
		1.
		修改配置文件后，必须注销重新登陆才会生效
		使用source命令可使之立即生效，例：source .bashrc

		2.
		~代表家目录，～下的配置文件每个用户自己【独享】
		etc目录下的配置文件所有用户【共享】。
		有如下5个环境变量配置文件的目录：（正常登录顺序）
		/etc/profile 
		/etc/profile.d/*.sh
		~/.bash_profile
		~/.bashrc
		/etc/bashrc

		变量叠加 
		PATH=$PATH:HOME/bin
		export PATH
		
		PS1 提示符
		
		~/.bash_logout注销时候生效的环境变量配置文件
		~/.bash_history 保存在硬盘上 历史记录
		历史记录保存多少条，在/etc/profile中记录
		用history 命令看，与 vi .bash_history 查看文件看的区别：
		history 记录的命令多后者的多，原因是，history 是记录在内存中，
		包含了本次登录后操作的命令；而后者还未将本次登录操作的命令保存在内
		

shell编程之正则表达式
		正则表达式与通配符
		通配符
		＊ 代表匹配任意内容
		？ 代表匹配任意一个内容
		［］ 代表中括号中一个字符

		正则表达式用来在文件中匹配符合条件的字符串，正则是包含匹配。grep，awk，sed等命令可以支持正则表达式。
		通配符用来匹配符号条件的文件名，通配符是完全匹配。ls，find，cp这些命令不支持正则表达式，所以只能使用shell自己的通配符来进行匹配。
	
	正则表达式
		* 前一个字符匹配0次或任意多次
		. 匹配除了换行符外任意一个字符
		^ 匹配行首 例如 ^hello 会匹配以hello开头的行
		$ 匹配行尾 例如 hello$ 会匹配以hello结尾的行
		[] 匹配中括号中指定的任意一个字符，只匹配一个字符。[0-9]匹配任意一位数字
		[^] 匹配除中括号的字符以外的任意一个字符。 例如 [^0-9]匹配任意一位非数字字符
		[^a-z]表示任意一位非小写字母
		\ 转义符 用于取消将特殊符号的含义取消
		\{n\} 表示其前面的字符恰好出现N次 例如 [0-9]\{4\} 匹配4位数字
		[1][3-8][0-9]\{9\} 匹配手机号码
		\{n,\} 表示其前面的字符出现不小于n次。 例如 [0-9]\{2,\} 表示两位及以上的数字
		\{n,m\} 表示其前面的字符至少出现n次，最多出现m次。 
		例如 [a-z]\{6,8\} 匹配6到8位的小写字母
		
	基础正则
		符号: .
		grep "s..d" test.txt　表示匹配s和d之间含有2个任意字符(除换行符)行，有多少个点就多少个字符
		grep "s.*d" test.txt　表示匹配s和d之间含有任意内容的行

		符号^代表匹配行首，符号$代表匹配行尾
		grep "^s" test.txt　匹配以s开头的行
		grep "b$" test.txt　匹配以b结尾的行
		grep "^$" test.txt　匹配空白行
		grep -n　在结果中增加行号

		符号[ ]的作用与通配符中的[ ]一致
		grep "[0-9]" test.txt　匹配包含有数字的全部行
		注意：^用在[ ]内代表取反
		grep "[^0-9]" test.txt 匹配包含字母的全部行

		匹配所有字母： [a-zA-z]
		"\" 转意符 让特殊的符号丧失作用，只表示符号本身
		"\.$" 匹配使用"."结尾的行
		接上 ".$" 不能用它，因为其表示的意思是以任意字符结尾的行

		"\{n\}" 表示其前面的字符【恰好】出现n次
		"a\{3\}" 匹配a字母连续出现三次的字符串
		"^[0-9]\{3\}" 匹配开头包含连续的三个数字的字符串
		"c\{3\}u" 匹配u前面有【大于等于】三个c的字符串
		如果需要准确匹配，则需要在前后使用分隔符
		"xc\{3\}u" 匹配x和u之间三个c的字符串

		"\{n,\}" 表示其前面的字符出现不小于n次
		"^[0-9]\{3,\}[a-z]" 匹配最少用连续三个数字开头的行

		"\{n,m\}" 匹配其前面的字符至少出现n次，最多出现m次
		"sa\{1,3\}i" 匹配在字母s和字母i之间最少一个a，最多三个a

		[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} 匹配日期格式yyyy-mm-dd

		[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\ 匹配IP地址

1.字符截取
		grep -v 取反
		grep行提取，cut列提取；
		cut [选项] 文件名
		-f 列号：提取第几列（从1开始）
		cut -f 列号，列号 （多个列号用逗号隔开；这个方法默认的文件以TAB制表符）
		cut -f 列号，列号 -d "指定的分隔符" （比如图中，以：为分隔符；列出第1，和第3列的内容）
		-d 分隔符：按照指定分隔符分割列 默认为tab
		grep "bin/bash" /etc/passwd | grep -v "root" | cut -f 1 -d ":" 提取非root登录用户用户名；
		df -h 
		
2.printf命令 --> 格式化输出命令
		printf "输出类型输出格式" 输出内容
		输出类型：
		%ns：输出字符串。n是数字，指代输出几个字符
		%ni：输出整数。n是数字，指代输出几个数字
		%m.nf：输出浮点数。m和n是数字，指代输出的整数位数和小数位数。如%8.2f代表共输出8位数，其中2是小数位数，6位是整数
		输出格式：
		\a：输出警告声音
		\b：输出退格键，也就是Backspace键
		\f：清空屏幕
		\n：换行
		\r：回车，也就是Enter键
		\t：水平输出退格键，也就是Tab键
		\v：垂直输出退格键，也就是Tab键

		printf '%s\t%s\t%s\n' 1 2 3 4 5 6 --> 此时才会正确输出：
		1 2	3
		4	5	6
		使用printf输出命令，必须明确指出所有的格式
		如果想要使用printf读取文件中的内容就需要：
		printf '%s' $(cat student.txt) 不调整输出格式
		printf '%s\t%s\t%s\t%s\n' $(cat student.txt) 调整输出格式

3.awk命令
		awk命令的输出中支持print和printf命令
		print在输出之后会在自动加入换行符，但Linux系统中默认没有print命令
		printf是标准格式输出命令，并不会自动加入换行符，如需换行，需要手动加入换行符
		awk是一个数据处理工具，相比于sed常常作用于一整行的处理，awk则比较倾向于将一行分成数个”字段“来处理。
		通常运行模式： awk ' 条件类型1{动作1} 条件类型2{动作2}...‘ filename
		例：awk '{printf $2 "\t" $4 "\n"}' filename
		awk '{print $2 "\t" $4}' filename
		printf后面要接换行符"\n" print 不需要

		awk默认以空格或者Tab制表符作为分隔
		1、条件BAGIN表示在所有动作执行前先执行BEGIN后的那个动作
		如#df -h awk 'BEGIN{print "test"}{print $1 "\t" $3}'会在最前面输出test
		awk在指定分隔符前面一定要加BEGIN
		2、条件END表示在所有动作执行后才执行END后的那个动作
		如#df -h awk 'END{print "test"}{print $1 "\t" $3}' 会在最后面输出test
		3、FS内置变量
		如：#cat /etc/passwd grep "/bin/bash" awk 'BEGIN{FS=":"}{print $1 "\t" #3}'
		#awk在指定分隔符前面一定要加BEGIN，此例截取第1、3列
		#cat student.txt grep -v Name awk '$4>=70{print $2}'
		#此例截取除了列头的成绩大于等于70分的学生姓名，grep -v Name为取反命令，不输出带“Name”的行
		
		NR:表示记录数量(number of  records)，表示当前行号，和cat命令中-n 意思一样。
		NF:表示字段数量(number of fields),表示当前行的字段数量
		$0,$1,$2,$n....　前面已经说过，$0表示输出所有文本内容，$n表示第n行数据
		cat test.txt | awk '{ print NR }'
		
		 awk '/amos/' test.txt  只显示包含amos的行
		 awk ' { print toupper("yes") }'  toupper(string),将字符串转为大写
		 awk '{ print sqrt(4)}' sqrt()取平方根
		 awk ' { print length }' test.txt length,长度
4.sed命令
		字符串替换
		sed [选项] [动作] 文件名
		选项:
		-n 只输出经过sed处理过的行到屏幕
		-e 允许一次应用多个动作
		-i 直接修改文件,并且不由屏幕输出

		动作:
		a : 追加,在当前行后添加一行或多行
		c : 整行替换
		i : 插入,在当前行前插入一行或多行
		p : 打印
		s : 字串替换(替换格式与vim中的类似) '行范围s/旧字串/新字串/g'
		d : 删除

		sed -n '2p' student.txt 查看文件的第二行，如果没有-n将输出全部内容
		sed '2,4d' student.txt 表示删除【第2-4行】，但是不改变文件本身
		sed '2a piaoliangdecxiaoguniang' student.txt 在第2行之后添加字符串，但是不改变字符串本身
		sed '4c xxwmpg' student.txt 将第二行的整行替换为xxwmpg
		sed '6s/70/100/g' student.txt 将第7行的所有70全部替换为100，如果不指定行的话会替换所有的指定字符串
		-e ; 负责隔开进行多个动作
		sed -e 's/fengj//g';s/cang//g' student.txt 同时把fengj和cang替换为空

字符处理命令
		1.排序命令sort
		sort [选项]
		-f 忽略大小写
		-n 以数值型进行排序
		-r 反向排序
		-t 指定分隔符,默认是制表符
		-k n[,m] 按照指定的字段范围排序.从第n字段开始,m字段结束(默认到行尾)

		2.统计命令wc
		wc [选项] 文件名
		选项:
		-l 只统计行数
		-w 只统计单词数
		-m 只统计字符数

shell编程之条件判断与流程控制
	1.判断文件类型,常用的3个:
		-d 判断该文件是否存在,并且是否为目录文件(是目录为真)
		-e 判断该文件是否存在 (存在为真)
		-f 判断该文件是否存在,并且是否为普通文件(是普通文件为真)
		例如: [ -e /root/install.log ] 然后 echo $? 若返回非零则说明文件存在
		[ -e /root/install.log ] && echo yes echo no
	2.权限
		-r：判断该文件是否存在，并且是否该文件拥有读权限
		-w：判断该文件是否存在，并且是否该文件拥有写权限
		-x：判断该文件是否存在，并且是否该文件拥有执行权限
		-u：判断该文件是否存在，并且是否该文件拥有SUID权限
		-g：判断该文件是否存在，并且是否该文件拥有SGID权限
		-k：判断该文件是否存在，并且是否该文件拥有SBit权限
		
		file1 -nt file2：判断文件1的修改时间是否比文件2的新
		file1 -ot file2：判断文件1的修改时间是否比文件2的旧
		file1 -ef file2：判断文件1是否比文件2的Inode号一致，可以理解为两个文件是否为同一个文件。
		ln /root/student.txt /tmp/stu.txt #创建硬链接
		
		num1 -eq num2：判断整数1是否和整数2相等
		num1 -ne num2：判断整数1是否和整数2不相等
		num1 -gt num2：判断整数1是否大于整数2
		num1 -lt num2：判断整数1是否小于整数2
		num1 -ge num2：判断整数1是否大于或等于整数2
		num1 -le num2：判断整数1是否小于或等于整数2
		
		-z 字符串 #判断是否为空，为空返回真
		-n 字符串 #判断是否为非空，非空返回真
		字符串1 = = 字符串2 #判断字符串是否相等，相等返回真
		字符串1 != 字符串2 #判断字符串是否不等，不等返回真
		
		判断1 -a 判断2：逻辑与，判断1和判断2都成立，最终结果为真
		判断1 -o 判断2：逻辑或，判断1和判断2有一个成立，最终结果为真
		！判断：逻辑非，是原始的判断式取反

单分支if语句		
		# if和[之间要有空格，[ 与"$test"；"$test"与== 等之间也要有空格
				#!/bash/bash
		test=$(env |grep "USER" |cut -d "=" 2)
		if [ "$test" == root ]
		        then
		        echo "Current user is root"
		fi		
		
		#!/bin/bash

		read -t 30 -p "Please input yes/no:" cho

		case "$cho" in
		"yes")
		echo "You input yes!"
		;;
		"no")
		echo "You input no!"
		;;
		*)
		echo "Please input yes/no!"
		;;
		esac

		#!/bin/bash

		cd /root/test
		ls *.tar.gz > ls.log(>覆盖)
		ls *.tgz >> ls.log(>>添加)
		for i in $(cat ls.log)
		do
		tar -zxvf $i & > /dev/null
		done
		rm -rf ls.log