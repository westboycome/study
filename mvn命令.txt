mvn -v 版本
-compile 编译
-test 测试
-package 打包
-clean 清除maven生成的target目录
-install 将生成的jar安装到本地仓库中

mvn clean test"，"mvn clean package"，"mvn clean install"
mvn clean install ，执行安装命令前，会先执行编译、测试、打包命令
java -cp target\myapp-1.0-SNAPSHOT.jar com.mycompany.app.App，


maven创建目录的两种方式
1.archetype:generate 按照提示进行选择
2.archetype:generate -DgourpId=组织名，公司网址的反写+项目名称
-DartifactId=项目名-模块名
-Dversion=版本号
-Dpackage=代码所在的包名

mvn archetype:generate -DgroupId:组织名，
公司域名反写+项目名 -DartifactId：项目名-模块名 
-Dversion:版本 -Dpackage:包名。一次性创建。
列如：
mvn archetype:generate -DgroupId=com.imooc.maven04 -DartifactId=maven04-demo -Dversion=1.0.0-SNAPSHOT -Dpackage=com.imooc.maven04-demo

1.坐标 能够唯一标识平面中的一点，
基本坐标groupId artifactId version，还有packing、classifier，
一般groupId：公司反写 + 项目名
artifactId ：项目名-模块名

2.构件：jar、war都称之构件，用maven坐标唯一标识。

3.仓库 
分为 本地/远程仓库
lib下maven-model-builder-3.1.1.jar中的pom.xml为所有pom文件父类，里面配置有默认中央仓库。
修改仓库默认地址，在settings.xml中：
<localRepository>d:/tools/maven/maven_resp</localRepository>
一般将将settings.xml复制一份到maven_resp中，他将继承conf/settings.xml，这样可以保证以后升级maven版本不会覆盖自定义配置。


4.镜像仓库在 conf下settings.xml中，
<mirrors>
<mirror>
<id>maven.net.cn</id>
<mirrorOf>central</mirrorOf> <!-- 为哪个仓库配置镜像，旦配置了镜像，原来的配置都会失效-->
<name>center Mirror in china</name>
<url>http://maven.net.cn/content/groups/public</url>
</mirror>
<mirrors>


完整的项目构建过程包括：
清理、编译、测试、打包、集成测试、验证、部署

maven生命周期：
clean：清理项目
- pre-clean ：执行清理前的工作
- clean：清理上一次构建生成的所有文件
- post-clean：执行清理后的文件

default：构建项目
- compile test package install
site：生成项目站点
- pre-site 在生成项目站点之前要完成的工作
- site 生成项目的站点文档
- post-site在生成项目站点后要完成的工作
- site-deploy发布生成的站点到服务器上

pom.xml解析
1.根元素 project
2.modelVersion 固定版本4.0.0 指定了当前pom的版本
3.坐标 <groupId>,<artifactId>,<version>,<packageing>
groupId 反写的公司网址+项目名
artifactId 项目名+模块名
version 版本号 第一个0表示大版本号，第二个0表示分支版本号，第三个0表小大版本号。如：0.0.1snapshot快照。
(snapshot 快照/alpha 内部测试/beta 公测/Release稳定/GA正式发布)
packaging 打包方式 默认是jar
4. name :项目描述名
url:项目的地址
description：项目描述
developers：开发人员列表
licenses:许可证
organization：组织信息
5.dependency 依赖项
	   <groupId>
      <artifactId>
      <version>
      <scope>test</scope>依赖范围
<optional>:设置依赖是否可选 true false(默认)
<exclusions>:排除依赖传递列表(A->B->C，可排除C)
6.dependencyManagement管理，仅仅启到定义的作用，用于定义parent，子模块继承。
7.build-plugins 插件列表 指出坐标
8.parent 、 modules聚合多个模块 一起编译

依赖的范围scope
1.compile：默认范围，编译测试运行都有效
2.provided：在编译和测试时有效
3.runtime：在测试和运行时有效
4.test:只在测试时有效
5.system:在编译和测试时有效，与本机系统关联，可移植性差
6.import:导入的范围，它只使用在dependencyManagement中，表示从其他的pom中导入dependency的配置


依赖冲突
不同版本的构件
1.短路 优先
2.先声明先优先
如果路径长度相同，则谁先声明，先解析谁

聚合和继承

创建JavaWeb项目
mvn archetype:generate -DgroupId=com.xiaoheizi.maven04 -DartifactId=my-WebApp -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false
mvn archetype:create -DgroupId=com.xiaoheizi.maven04 -DartifactId=system-parent -Dversion=1.0.0-SNAPSHOT -Dpackage=com.xiaohizi.maven04-demo -DinteractiveMode=false













