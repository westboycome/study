一、投简历网站：
	拉勾网、BOSS直聘、猎聘网、智联和无忧。

二、面试流程： 
	1）让你自我介绍 
	2）问Java基础知识 
	3）问项目 
	4）情景问题，例如：你的一个功能上了生产环境后，服务器压力骤增，该怎么排查。 
	5）你有什么想问面试官的

三、笔试：
	1）写SQL：写SQL很常考察group by、内连接和外连接。
	2）手写代码：手写代码一般考单例、排序、线程、消费者生产者。我建议排序算法除了冒泡排序，最好还能手写一种其他的排序代码。

四、知识点：
	1、集合相关问题（必问）： 
	HashMap、LinkedHashMap、ConcurrentHashMap、ArrayList、LinkedList的底层实现。 
	HashMap和Hashtable的区别。 
	ArrayList、LinkedList、Vector的区别。 
	HashMap和ConcurrentHashMap的区别。 
	HashMap和LinkedHashMap的区别。 
	HashMap是线程安全的吗。 
	ConcurrentHashMap是怎么实现线程安全的。 

2、线程相关问题（必问）： 
	创建线程的3种方式。 
	什么是线程安全。 
	Runnable接口和Callable接口的区别。 
	wait方法和sleep方法的区别。 
	synchronized、Lock、ReentrantLock、ReadWriteLock。 
	介绍下CAS(无锁技术)。 
	什么是ThreadLocal。 
	创建线程池的4种方式。 
	ThreadPoolExecutor的内部工作原理。 
	分布式环境下，怎么保证线程安全。

3、JVM相关问题： 
	介绍下垃圾收集机制（在什么时候，对什么，做了什么）。 
	垃圾收集有哪些算法，各自的特点。 
	类加载的过程。 双亲委派模型。 
	有哪些类加载器。 
	能不能自己写一个类叫java.lang.String。
 
4、设计模式相关问题（必问）： 
	先问你熟悉哪些设计模式，然后再具体问你某个设计模式具体实现和相关扩展问题。
		
	1）举出一个例子，在这种情况你会更倾向于使用抽象类，而不是接口？
		A、在Java中，你只能继承一个类，但可以实现多个接口。所以一旦你继承了一个类，你就失去了继承其他类的机会了。		
		B、接口通常被用来表示附属描述或行为如：Runnable、Clonable、Serializable等等，因此当你使用抽象类来表示行为时，你的类就不能同时是			Runnable和Clonable(译者注：这里的意思是指如果把Runnable等实现为抽象类的情况)，因为在Java中你不能继承两个类，但当你使用接口时，你	
		的类就可以同时拥有多个不同的行为。
		C、在一些对时间要求比较高的应用中，倾向于使用抽象类，它会比接口稍快一点。	D、如果希望把一系列行为都规范在类继承层次内，并且可以更
		好地在同一个地方进行编码，那么抽象类是一个更好的选择。有时，接口和抽象类可以一起使用，接口中定义函数，而在抽象类中定义默认的实现。

		希望了解更多关于Java接口的，可以看我的文章Java接口需要知道的10件事。
	2）设计一个贩卖机，可以接收不同的货币，出售不同的产品？
	3） 你有一个Smartphone类，可以派生如IPhone、AndroidPhone、WindowsMobilePhone类
	4） 在Java中，什么时候用重载，什么时候用重写？												对有经验的Java设计师来说，这是一个相当简单的问题。如果你看到一个类的不同实现有着不同的方式来做同一件事，那么就应该用重写（overriding），而
	重载（overloading）是用不同的输入做同一件事。在Java中，重载的方法签名不同，而重写并不是。
	5）设计一个ATM机？												我们所有人都使用
	ATM(自动柜员机)。想想你会怎么设计一个ATM？就设计金融系统来说，必须知道它们应该在任何情况下都能够如期工作。不管是断电还是其他情况，ATM应该保
	持 正确的状态（事务） , 想想 加锁（locking）、事务（transaction）、错误条件（error condition）、边界条件（boundary condition） 等等。尽
	管你不能想到具体的设计，但如果你可以指出非功能性需求，提出一些问题，想到关于边界条件，这些都会是很好的一步。
	6）你正在写一些类提供市场数据，你知道你可以不定时切换不同的厂商如Reuters、wombat或者直接的批发商，你会如何设计你的市场数据系统。	这是一个非
	常有趣的设计面试问题，并且真的在一家大的投资银行问到过，如果你是用Java编码的话这是一个相当平常的场景。最主要的一点是你要有一个MarketData接
	口，它会有调用端需要的方法如：getBid()、getPrice()、getLevel()等等，而MarketData应该由一个MarketDataProvider通过 依赖注入（dependency 
	injection） 组成。因此，当你修改你的MarketData 提供器（MarketDataProvider）时，调用端不会受影响，因为它们是通过MarketData接口或类的方法
	来访问的。
	
	7)在Java中，为什么不允许从静态方法中访问非静态变量？
		你在Java中不能从静态上下文访问非静态数据只是因为非静态变量是跟具体的对象实例关联的，而静态的却没有和任何实例关联。
	
	8)在Java中设计一个并发规则的pipeline？	
	并发编程或并发设计这些天很火，它可以充分利用现在不断提升的高级处理器的处理能力，而Java成为一多线程语言也从这种情况获益良多。设计一个并发系统
	需要记住的最关键的点是线程安全，不可变性，本地变量和避免使用static或者类变量（instance variables）。你只需要想着每一类都可以同时被多个线程
	同时执行，所以最好的做法就是每一个线程都处理自己的数据 ，不跟其他数据交互，并且运行时只需要最小的同步保证。这个问题可以涉及到从最初的讨论到完
	整的类和接口编码，但只要你记住并发中最重要的点和问题如，竞争条件（race condition）、死锁（deadlock）、内存交互问题（memory 
	interference）、原子性、ThreadLocal变量等
	
1. 什么是设计模式？你是否在你的代码里面使用过任何设计模式？
	设计模式是世界上各种各样程序员用来解决特定设计问题的尝试和测试的方法。设计模式是代码可用性的延伸。

2. 你可以说出几个在JDK库中使用的设计模式吗？
	装饰器设计模式（Decorator design pattern）被用于多个Java IO类中。单例模式（Singleton pattern）用于Runtime，Calendar和其他的一些类中。工厂模式（Factory pattern）被用于各种不可变的类如Boolean，像Boolean.valueOf，观察者模式（Observer pattern）被用于Swing和很多的事件监听中。

	3. Java中什么是单例设计模式？用Java写出线程安全的单例	单例模式重点在于在整个系统上共享一些创建时较耗资源的对象。整个应用中只维护一个特定类实例，它被所有组件共同使用。Java.lang.Runtime是单例模式的经典例子。你可以在我的文章Java单例模式的10个问题看到更多的问题和讨论。从Java 5开始你可以使用枚举（enum）来实现线程安全的单例。

	4. 使用工厂模式最主要的好处是什么？你在哪里使用？
	工厂模式的最大好处是增加了创建对象时的封装层次。如果 你使用工厂来创建对象，之后你可以使用更高级和更高性能的实现来替换原始的产品实现或类，这不需要在调用层做任何修改。可以看我的文章工厂模式得更详细的解释和和了解更多的好处。

	5. 在Java中，什么叫观察者设计模式（observer design pattern）？	观察者模式是基于对象的状态变化和观察者的通讯，以便他们作出相应的操作。简单的例子就是一个天气系统，当天气变化时必须在展示给公众的视图中进行反映。这个视图对象是一个主体，而不同的视图是观察者。可以在这篇文章中看到Java观察者模式的完整例子。

	6. 举一个用Java实现的装饰模式(decorator design pattern)？它是作用于对象层次还是类层次？
	装饰模式增加强了单个对象的能力。Java IO到处都使用了装饰模式，经典的例子就是Buffered系列类如BufferedReader和BufferedWriter，它们增强了Reader和Writer对象，以实现提升性能的Buffer层次的读取和写入。可以看这篇文章了解更多。

	7. 什么是MVC设计模式？举一个MVC设计模式的例子？

	8, Java中什么是表示层设计模式（FrontController design pattern）？举一个使用表示层设计模式（front controller pattern）的例子？

	9. 什么是责任链模式（Chain of Responsibility）？

	10. 什么是适配器模式？举用Java实现适配器模式的例子？

 
5、数据库相关问题，针对Mysql（必问）： 
	给题目让你手写SQL。 
	有没有SQL优化经验。 
	Mysql索引的数据结构。 
	SQL怎么进行优化。 
	SQL关键字的执行顺序。 
	有哪几种索引。 
	什么时候该（不该）建索引。 
	Explain包含哪些列。 
	Explain的Type列有哪几种值。
 
6、框架相关问题： 
	Hibernate和Mybatis的区别。 
	Spring MVC和Struts2的区别。 
	Spring用了哪些设计模式。 
	Spring中AOP主要用来做什么。 
	Spring注入bean的方式。 
	什么是IOC，什么是依赖注入。 
	Spring是单例还是多例，怎么修改。 
	Spring事务隔离级别和传播性。 
	介绍下Mybatis/Hibernate的缓存机制。 
	Mybatis的mapper文件中#和$的区别。 
	Mybatis的mapper文件中resultType和resultMap的区别。 
	Mybatis中DAO层接口没有写实现类，Mapper中的方法和DAO接口方法是怎么绑定到一起的，其内部是怎么实现的。
 
7、其他遇到问题： 
	介绍下栈和队列。 
	IO和NIO的区别。 
	接口和抽象类的区别。 
	int和Integer的自动拆箱/装箱相关问题。 常量池相关问题。 
	==和equals的区别。 
	重载和重写的区别。 
	String和StringBuilder、StringBuffer的区别。 
	静态变量、实例变量、局部变量线程安全吗，为什么。 try、catch、finally都有return语句时执行哪个。 
	介绍下B树、二叉树。 
	ajax的4个字母分别是什么意思。 
	xml全称是什么。 
	分布式锁的实现。 
	分布式session存储解决方案。 
	常用的linux命令。
